{"version":3,"sources":["firebase/index.ts","firebase/auth.ts","components/Home.tsx","theme.ts","firebase/storage.ts","components/Calculator/AssignmentList.tsx","components/Button.tsx","components/InputField.tsx","components/HowToModal.tsx","components/Navbar.tsx","components/Layout.tsx","components/Calculator/Stats.tsx","utils/statCalculator.ts","components/Calculator/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["isInitialized","firebase","length","isUserSignedIn","currentUser","signInWithGoogle","shouldRedirect","Promise","resolve","reject","getRedirectResult","then","user","provider","GoogleAuthProvider","signInWithRedirect","catch","error","console","code","message","StyledHome","styled","div","StyledButton","button","StyledOptions","StyledLink","Link","UnderlineLink","a","Home","props","signIn","setUser","displayName","onClick","to","role","aria-label","href","getDocuments","collection","filter","undefined","ref","where","fieldPath","opStr","value","get","snapshot","docs","map","doc","data","storeDocument","document","add","StyledAssignmentList","AssignmentTable","StyledAssignment","AssignmentList","assignments","assignment","key","id","name","grade","weight","StyledGenericButton","css","StyledLinkButton","StyledFunctionalButton","Button","children","StyledInputField","StyledLabel","label","StyledInput","input","type","InputField","htmlFor","onChange","ModalBackground","Modal","HowToModal","open","toggle","StyledNav","nav","NavLinks","StyledHowTo","p","Navbar","useState","modalOpen","setModalOpen","as","StyledLayout","StyledMain","main","Layout","StyledStats","StatRow","StatCol","StyledStat","Stats","avgGrade","setAvgGrade","highGrade","setHighGrade","setWeight","lowGrade","setLowGrade","useEffect","gradeSum","totalWeight","forEach","average","highestPossible","lowestPossible","getStats","nanGuard","isNaN","StyledCalculatorPage","GradeInput","InputFields","Calculator","assignmentList","setAssignmentList","nameField","setNameField","gradeField","setGradeField","weightField","setWeightField","changeHandler","event","target","parseInt","addAssignment","date","Date","getTime","uid","fetchAssignments","toString","App","routeProps","initialized","useRef","current","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ffc49b4.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\n\n\nconst isInitialized = () => {\n  return firebase.apps.length > 0;\n};\n\nconst initialize = () => {\n  firebase.initializeApp({\n    apiKey: \"AIzaSyAHEDybBBGR97FXlPFNMMVId_2tiyby9Ps\",\n    authDomain: \"gr-calc.firebaseapp.com\",\n    databaseURL: \"https://gr-calc.firebaseio.com\",\n    projectId: \"gr-calc\",\n    storageBucket: \"gr-calc.appspot.com\",\n    messagingSenderId: \"792549088089\",\n    appId: \"1:792549088089:web:dc97154c17c6da87190a48\"\n  });\n}\n\n\nexport {\n  isInitialized,\n  initialize,\n};\n","import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\n\nconst isUserSignedIn = () => {\n  return firebase.auth().currentUser !== null;\n};\n\nconst signInWithGoogle = (shouldRedirect: boolean = true): Promise<firebase.User> => new Promise((resolve, reject) => {\n  firebase.auth().getRedirectResult()\n    .then(({ user }) => {\n      if (user) return resolve(user);\n      if (!shouldRedirect) return;\n      const provider = new firebase.auth.GoogleAuthProvider();\n      firebase.auth().signInWithRedirect(provider);\n    })\n    .catch(error => {\n      console.error(error.code, error.message);\n      reject(error);\n    });\n});\n\n\nexport {\n  isUserSignedIn,\n  signInWithGoogle,\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { signInWithGoogle } from \"../firebase/auth\";\nimport styled from \"styled-components\";\n\nimport { primaryColor, white, gridLineColor } from \"../theme\";\n\n// TODO: Optimize layout for smaller screens\nconst StyledHome = styled.div`\n  height: 100vh;\n  width: 100vw;\n  color: ${white};\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n\n  /* Background styles */\n  background-image: repeating-linear-gradient(\n      transparent,\n      transparent 35px,\n      ${gridLineColor} 35px,\n      ${gridLineColor} 36px\n    ),\n    repeating-linear-gradient(\n      90deg,\n      ${primaryColor},\n      ${primaryColor} 35px,\n      ${gridLineColor} 35px,\n      ${gridLineColor} 36px\n    );\n\n  h2 {\n    font-size: 72px;\n    font-weight: 600;\n    margin: 2rem 0 -2rem 0;\n  }\n\n  h1 {\n    font-size: 144px;\n    font-weight: 600;\n    margin: 0 0 2rem 0;\n  }\n\n  p {\n    font-size: 20px;\n  }\n`;\n\nconst StyledButton = styled.button`\n  background: ${white};\n  border-radius: 25px;\n  border: none;\n  color: ${primaryColor};\n  font-size: 20px;\n  padding: 0.5rem 2rem;\n  margin: 1rem 0 1rem 0;\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst StyledOptions = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst StyledLink = styled(Link)`\n  color: ${white};\n  text-decoration: none;\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst UnderlineLink = styled.a`\n  color: ${white};\n  text-decoration: underline;\n`;\n\nconst Home = (props: any) => {\n  const signIn = async () => props.setUser(await signInWithGoogle());\n\n  return (\n    <StyledHome>\n      <h2>GradeMe</h2>\n      <StyledOptions>\n        <h1>{props.user != null ? props.user.displayName : \"Sign In\"}</h1>\n        {props.user === null && (\n          <StyledButton onClick={signIn}>Sign in with Google</StyledButton>\n        )}\n        <StyledLink to=\"/calculator\">Back to calculator</StyledLink>\n      </StyledOptions>\n      <p>\n        Created with{\" \"}\n        <span role=\"img\" aria-label=\"Heart Emoji\">\n          ❤️\n        </span>{\" \"}\n        by{\" \"}\n        <UnderlineLink href=\"https://github.com/spellew\">\n          Shamroy,\n        </UnderlineLink>{\" \"}\n        <UnderlineLink href=\"https://github.com/tomdng\">Tommy,</UnderlineLink>{\" \"}\n        and <UnderlineLink href=\"https://github.com/Walsker\">Wal</UnderlineLink>\n      </p>\n    </StyledHome>\n  );\n};\n\nexport default Home;\n","export const black = \"#373737\";\nexport const gridLineColor = \"#a96bf7\";\nexport const grey = \"#9B9B9B\";\nexport const primaryColor = \"#8c39f5\";\nexport const white = \"#fff\";\n","import * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\n\nconst getDocuments = (collection: string, filter: { fieldPath: string, opStr: firebase.firestore.WhereFilterOp, value: any } | undefined = undefined): Promise<firebase.firestore.DocumentData[]> => new Promise((resolve, reject) => {\n  let ref: firebase.firestore.Query<firebase.firestore.DocumentData> | firebase.firestore.CollectionReference<firebase.firestore.DocumentData> = firebase.firestore().collection(collection);\n  if (filter !== undefined) ref = ref.where(filter.fieldPath, filter.opStr, filter.value);\n  \n  ref.get()\n    .then(snapshot => resolve(snapshot.docs.map(doc => doc.data())))\n    .catch(error => {\n      console.error(error.code, error.message);\n      reject(error);\n    });\n});\n\nconst storeDocument = (collection: string, document: firebase.firestore.DocumentData): Promise<firebase.firestore.DocumentReference<firebase.firestore.DocumentData>> => new Promise((resolve, reject) => {\n  firebase.firestore().collection(collection).add(document)\n    .then(ref => resolve(ref))\n    .catch(error => {\n      console.error(error.code, error.message);\n      reject(error);\n    });\n});\n\n\nexport {\n  getDocuments,\n  storeDocument,\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledAssignmentList = styled.div`\n`;\n\nconst AssignmentTable = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  justify-items: center;\n`;\n\nconst StyledAssignment = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  justify-items: center;\n\n  p {\n    font-size: 20px;\n    margin: 0;\n  }\n`;\n\ntype Assignment = {\n  id: string;\n  name: string;\n  grade: number;\n  weight: number;\n};\n\ntype AssignmentListProps = {\n  assignments: Assignment[];\n};\n\n// TODO: Styling\n// TODO: Remove/edit assignments?\nconst AssignmentList = (props: AssignmentListProps) => {\n  return (\n    <StyledAssignmentList>\n      <h2>Assignment List</h2>\n      <AssignmentTable>\n        <h3>Assignment Name</h3>\n        <h3>Grade</h3>\n        <h3>Weight</h3>\n      </AssignmentTable>\n      {props.assignments.map((assignment) => (\n          <StyledAssignment key={assignment.id}>\n            <p>{assignment.name}</p>\n            <p>{assignment.grade}</p>\n            <p>{assignment.weight}</p>\n          </StyledAssignment>\n        ))}\n    </StyledAssignmentList>\n  );\n};\n\nexport default AssignmentList;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled, { css } from \"styled-components\";\n\nimport { primaryColor, white } from \"../theme\";\n\nconst StyledGenericButton = css`\n  background: ${primaryColor};\n  color: ${white};\n  border-radius: 25px;\n  border: none;\n  font-size: 20px;\n  padding: 0.5rem 2rem;\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst StyledLinkButton = styled(Link)`\n  ${StyledGenericButton};\n`;\n\nconst StyledFunctionalButton = styled.button`\n  ${StyledGenericButton};\n`;\ntype ButtonProps = {\n  children: string;\n  to?: string;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n};\nconst Button = (props: ButtonProps) => {\n  return (\n    <>\n      {props.to ? (\n        <StyledLinkButton to={props.to}>{props.children}</StyledLinkButton>\n      ) : (\n        <StyledFunctionalButton onClick={props.onClick}>\n          {props.children}\n        </StyledFunctionalButton>\n      )}\n    </>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { black, grey } from \"../theme\";\n\nconst StyledInputField = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-right: 6rem;\n`;\n\nconst StyledLabel = styled.label`\n  color: ${black};\n  font-size: 20px;\n  display: inline-block;\n  margin-bottom: 0.25rem;\n`;\n\ntype StyleProp = {\n  type: string;\n};\n\nconst StyledInput = styled.input`\n  width: ${(props: StyleProp): string =>\n    props.type === \"number\" ? \"4rem\" : \"auto\"};\n  border-radius: 26px;\n  border: solid ${grey} 2px;\n  color: ${grey};\n  display: inline-block;\n  font-size: 20px;\n  padding: 0.25rem 1rem;\n`;\n\ntype InputProps = {\n  type: string;\n  id: string;\n  label: string;\n  value: string | number;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst InputField = (props: InputProps) => {\n  return (\n    <StyledInputField>\n      <StyledLabel htmlFor={props.id}>{props.label}</StyledLabel>\n      <StyledInput\n        type={props.type}\n        id={props.id}\n        value={props.value}\n        onChange={props.onChange}\n      />\n    </StyledInputField>\n  );\n};\n\nexport default InputField;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { primaryColor, white } from \"../theme\";\n\nconst ModalBackground = styled.div`\n  z-index: 10;\n  position: fixed;\n  left: 0;\n  top: 0;\n  height: 100vh;\n  width: 100vw;\n  background: rgba(0, 0, 0, 0.6);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Modal = styled.div`\n  z-index: 100;\n  padding: 3rem 3rem;\n  background: ${white};\n  border-radius: 10px;\n  color: ${primaryColor};\n  display: flex;\n  flex-direction: column;\n\n  h1 {\n    font-size: 36px;\n    margin: 0 0 1rem 0;\n  }\n\n  p {\n    font-size: 20px;\n    margin: 0 0 1rem 0;\n  }\n`;\n\ntype ModalProps = {\n  open: boolean;\n  toggle: () => void;\n};\n\nconst HowToModal = (props: ModalProps) => {\n  return (\n    <>\n      {props.open ? (\n        <ModalBackground onClick={props.toggle}>\n          <Modal>\n            <h1>How do I use this?</h1>\n            <p>\n              Just add the grade you got out of 100, and enter the weight of\n              that assignment out of 100\n            </p>\n            <p>\n              The best/worst grade is calculated by using the remaining weight\n              of your assignments that don't have a grade yet.\n            </p>\n          </Modal>\n        </ModalBackground>\n      ) : null}\n    </>\n  );\n};\n\nexport default HowToModal;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport { black, primaryColor } from \"../theme\";\nimport Button from \"./Button\";\nimport HowToModal from \"./HowToModal\";\n\n// TODO: Mobile styling\nconst StyledNav = styled.nav`\n  width: 80%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst NavLinks = styled.div`\n  color: ${black};\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n`;\n\nconst StyledHowTo = styled.p`\n  color: ${primaryColor};\n  font-size: 24px;\n  margin-right: 2rem;\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst StyledLink = styled(Link)`\n  color: ${primaryColor};\n  text-decoration: none;\n\n  h1 {\n    font-size: 36px;\n  }\n\n  p {\n    font-size: 24px;\n    margin-right: 2rem;\n  }\n`;\n\n// TODO: Conditionally rendered Signin/Profile button for authentication\nconst Navbar = () => {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  return (\n    <>\n      <StyledNav>\n        <StyledLink to=\"/\">\n          <h1>GradeMe</h1>\n        </StyledLink>\n        <NavLinks>\n          <StyledHowTo onClick={() => setModalOpen(true)}>How to</StyledHowTo>\n          <StyledLink as=\"a\" href=\"https://github.com/MLH-Fellowship/GradeMe\">\n            <p>Github</p>\n          </StyledLink>\n          <Button to=\"/\">Sign In</Button>\n        </NavLinks>\n        <HowToModal open={modalOpen} toggle={() => setModalOpen(!modalOpen)} />\n      </StyledNav>\n    </>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Navbar from \"./Navbar\";\n\nconst StyledLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst StyledMain = styled.main`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ntype LayoutProps = {\n  children: React.ReactNode;\n};\n\nconst Layout = (props: LayoutProps) => {\n  return (\n    <StyledLayout>\n      <Navbar />\n      <StyledMain>{props.children}</StyledMain>\n    </StyledLayout>\n  );\n};\n\nexport default Layout;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport { getStats } from \"../../utils/statCalculator\";\n\nconst StyledStats = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 4rem 4rem 0;\n`;\n\nconst StatRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 1rem;\n`;\n\nconst StatCol = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-right: 1rem;\n`;\n\nconst StyledStat = styled.div`\n  margin-right: 2rem;\n\n  h3 {\n    font-size: 20px;\n    font-weight: 300;\n    margin: 0;\n  }\n\n  p {\n    font-size: 30px;\n    font-weight: 900;\n    margin: 0;\n  }\n`;\n\ntype Assignment = {\n  id: string;\n  name: string;\n  grade: number;\n  weight: number;\n};\n\ntype StatProps = {\n  assignments: Assignment[];\n};\n\nconst Stats = (props: StatProps) => {\n  const [avgGrade, setAvgGrade] = useState(0);\n  const [highGrade, setHighGrade] = useState(0);\n  const [weight, setWeight] = useState(0);\n  const [lowGrade, setLowGrade] = useState(0);\n\n  useEffect(() => {\n    const { average, totalWeight, highestPossible, lowestPossible } = getStats(\n      props.assignments\n    );\n    setAvgGrade(average);\n    setWeight(totalWeight);\n    setHighGrade(highestPossible);\n    setLowGrade(lowestPossible);\n  }, [props.assignments]);\n\n  const nanGuard = (grade: number) => {\n    return isNaN(grade) ? 0 : grade;\n  };\n\n  return (\n    <StyledStats>\n      <h2>Stats</h2>\n      <StatRow>\n        <StatCol>\n          <StyledStat>\n            <h3>Average Grade</h3>\n            <p>{nanGuard(avgGrade)}%</p>\n          </StyledStat>\n          <StyledStat>\n            <h3>Combined Weight</h3>\n            <p>{nanGuard(weight)}%</p>\n          </StyledStat>\n        </StatCol>\n        <StatCol>\n          <StyledStat>\n            <h3>Highest Possible Grade</h3>\n            <p>{nanGuard(highGrade)}%</p>\n          </StyledStat>\n          <StyledStat>\n            <h3>Lowest Possible Grade</h3>\n            <p>{nanGuard(lowGrade)}%</p>\n          </StyledStat>\n        </StatCol>\n      </StatRow>\n    </StyledStats>\n  );\n};\n\nexport default Stats;\n","type Assignment = {\n  id: string;\n  name: string;\n  grade: number;\n  weight: number;\n};\n\ntype StatType = {\n  average: number;\n  totalWeight: number;\n  highestPossible: number;\n  lowestPossible: number;\n};\n\nexport const getStats = (assignments: Assignment[]): StatType => {\n  let gradeSum = 0;\n  let totalWeight = 0;\n\n  assignments.forEach((assignment) => {\n    gradeSum += assignment.grade * assignment.weight;\n    totalWeight += assignment.weight;\n  });\n\n  gradeSum /= 100;\n  totalWeight /= 100;\n\n  let average = gradeSum / totalWeight;\n  let highestPossible =\n    ((average * totalWeight) / 100 + (1 - totalWeight)) * 100;\n  let lowestPossible = average * totalWeight;\n  return {\n    average,\n    totalWeight: totalWeight * 100,\n    highestPossible,\n    lowestPossible,\n  };\n};\n","import React, { useState, useEffect } from \"react\";\nimport { isUserSignedIn } from \"../../firebase/auth\";\nimport { getDocuments, storeDocument } from \"../../firebase/storage\";\nimport { isInitialized } from \"../../firebase\";\nimport styled from \"styled-components\";\n\nimport AssignmentList from \"./AssignmentList\";\nimport Button from \"../Button\";\nimport InputField from \"../InputField\";\nimport Layout from \"../Layout\";\nimport Stats from \"./Stats\";\n\nconst StyledCalculatorPage = styled.div`\n  width: 80%;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n\n  h1 {\n    font-size: 64px;\n    font-weight: 900;\n    margin-bottom: 0;\n  }\n\n  h2 {\n    font-size: 36px;\n    margin-bottom: 0;\n  }\n`;\n\nconst GradeInput = styled.div`\n  margin: 0 4rem 4rem 0;\n`;\n\nconst InputFields = styled.div`\n  margin-bottom: 2rem;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: flex-start;\n`;\n\ntype assignment = {\n  id: string;\n  name: string;\n  grade: number;\n  weight: number;\n};\n\nconst Calculator = (props: any) => {\n  const [assignmentList, setAssignmentList] = useState<assignment[]>([]);\n  const [nameField, setNameField] = useState(\"\");\n  const [gradeField, setGradeField] = useState(0);\n  const [weightField, setWeightField] = useState(0);\n\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    switch (event.target.id) {\n      case \"nameField\":\n        setNameField(event.target.value);\n        break;\n      case \"gradeField\":\n        setGradeField(parseInt(event.target.value, 10) || 0);\n        break;\n      case \"weightField\":\n        setWeightField(parseInt(event.target.value, 10) || 0);\n        break;\n    }\n  };\n\n  const addAssignment = async () => {\n    if (\n      !nameField ||\n      typeof gradeField !== \"number\" ||\n      typeof weightField !== \"number\"\n    )\n      return;\n\n    // Get time in seconds to append to the name of the task to\n    // generate a *mostly* unique ID for the assignment\n    let date = new Date().getTime() / 1000;\n    const assignment = {\n      id: `${nameField}-${date}`,\n      name: nameField,\n      grade: gradeField,\n      weight: weightField,\n      uid: props.user ? props.user.uid : null,\n    };\n\n    setNameField(\"\");\n    setGradeField(0);\n    setWeightField(0);\n\n    if (props.user) await storeDocument(`assignments`, assignment);\n    setAssignmentList([...assignmentList, assignment]);\n  };\n\n  useEffect(() => {\n    async function fetchAssignments() {\n      if (!isInitialized()) return;\n      if (!isUserSignedIn()) return;\n      if (props.user && props.user.uid) {\n        setAssignmentList((await getDocuments(`assignments`, { fieldPath: \"uid\", opStr: \"==\", value: props.user.uid })) as any);\n      }\n    };\n\n    fetchAssignments();\n  }, [props.user]);\n\n  return (\n    <Layout>\n      <StyledCalculatorPage>\n        <GradeInput>\n          <h1>Input your grades</h1>\n          <InputFields>\n            <InputField\n              type=\"text\"\n              id=\"nameField\"\n              label=\"Assignment Name\"\n              value={nameField}\n              onChange={changeHandler}\n            />\n            <InputField\n              type=\"number\"\n              id=\"gradeField\"\n              label=\"Grade\"\n              value={gradeField.toString()}\n              onChange={changeHandler}\n            />\n            <InputField\n              type=\"number\"\n              id=\"weightField\"\n              label=\"Weight\"\n              value={weightField.toString()}\n              onChange={changeHandler}\n            />\n          </InputFields>\n          <Button onClick={addAssignment}>Add assignment</Button>\n        </GradeInput>\n        <Stats assignments={assignmentList} />\n        <AssignmentList assignments={assignmentList} />\n      </StyledCalculatorPage>\n    </Layout>\n  );\n};\n\nexport default Calculator;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport * as firebase from \"firebase/app\";\nimport { initialize } from \"./firebase\";\nimport { signInWithGoogle } from \"./firebase/auth\";\n\nimport Home from \"./components/Home\";\nimport Calculator from \"./components/Calculator\";\n\nconst App = () => {\n  const [user, setUser] = useState<firebase.User | null>(null);\n  const routeProps: any = { setUser, user };\n  let initialized = useRef(false);\n\n  useEffect(() => {\n    initialized.current = true;\n    initialize();\n  }, []);\n\n  if (initialized.current) {\n    signInWithGoogle(false);\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" render={(props: any) => <Home {...routeProps} />} />\n        <Route path=\"/calculator\" render={(props: any) => <Calculator {...routeProps} />} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}